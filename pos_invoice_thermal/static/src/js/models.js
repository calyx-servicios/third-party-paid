odoo.define('pos_invoice_thermal.models', function (require) {
  var Context = require('web.Context');
  var models = require('point_of_sale.models');
  var core = require('web.core');
  var utils = require('web.utils');




  var PosModelSuper = models.PosModel.prototype;
  models.PosModel = models.PosModel.extend({
    push_and_invoice_order: function(order){
        var self = this;
        if (!self.config.thermal_invoice){
          return PosModelSuper.push_and_invoice_order.call(this, order);
        }
        var invoiced = new Promise(function (resolveInvoiced, rejectInvoiced) {

          if(!order.get_client()){
              rejectInvoiced({code:400, message:'Missing Customer', data:{}});
          }else{

            var order_id = self.db.add_order(order.export_as_JSON());

            self.flush_mutex.exec(function(){
                var done =  new Promise(function (resolveDone, rejectDone) {

                  // send the order to the server
                  // we have a 30 seconds timeout on this push.
                  // FIXME: if the server takes more than 30 seconds to accept the order,
                  // the client will believe it wasn't successfully sent, and very bad
                  // things will happen as a duplicate will be sent next time
                  // so we must make sure the server detects and ignores duplicated orders

                  var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

                  transfer.catch(function(error){
                      rejectInvoiced(error);
                      rejectDone();
                  });

                  // on success, get the order id generated by the server
                  transfer.then(function(order_server_id){
                      var thermal_url = '/report/download';
                      var postData ='data=["/report/thermal/pos_invoice_thermal.invoice_xml/' + order_server_id.join(',') + '", "qweb-thermal"]';
                      if (core.csrf_token) {
                         postData+='&csrf_token=' + core.csrf_token;
                      }
                      var token = new Date().getTime();
                      postData+='&token=' + token;
                      document.cookie = _.str.sprintf("%s=;expires=%s;path=/",
                      'fileToken', new Date().toGMTString());

                      var xhr = new XMLHttpRequest();

                      var ajaxDef = $.ajax(thermal_url, {
                          xhr: function() {return xhr;},
                          headers:{
                            Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
                            "Upgrade-Insecure-Requests": 1
                          },
                          data: postData,
                          processData:    false,
                          contentType:    'application/x-www-form-urlencoded',
                          type:           'POST',
                          dataType:       "HTML",
                          crossDomain:    true
                      }).then(function (xml) {
                            self.env.pos.proxy.printer.print_receipt_xml(xml);
                            resolveInvoiced(order_server_id);
                            resolveDone();
                          })
                        .fail(function (data) {
                          rejectInvoiced(data);
                          rejectDone();
                        });
                  });
                })

                return done;

            });
          }
        })

        return invoiced;
    }
  });



});
